name: Deploy to Kubernetes via Argo CD

on:
  push:
    branches:
      - main          # Production deployment
      - staging       # Staging deployment
      - develop       # Development deployment
  pull_request:
    branches:
      - main
      - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      deploy: ${{ steps.set-env.outputs.deploy }}
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: determine-environment
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update image tag in deployment manifest
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update image tag in the deployment manifest
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${IMAGE_TAG:0:7}|g" k8s/$ENVIRONMENT/deployment.yaml
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add k8s/$ENVIRONMENT/deployment.yaml
            git commit -m "Update $ENVIRONMENT deployment image to ${IMAGE_TAG:0:7}" || echo "No changes to commit"
            git push origin ${{ github.ref_name }} || echo "No changes to push"
          fi

      - name: Validate deployment
        run: |
          echo "‚úÖ Deployment manifest updated successfully"
          echo "üîç Checking updated manifest:"
          cat k8s/${{ needs.determine-environment.outputs.environment }}/deployment.yaml | grep -A 2 "image:"

  notify:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment to ${{ needs.determine-environment.outputs.environment }} was successful!"
          else
            echo "‚ùå Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          fi
